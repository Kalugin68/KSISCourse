import customtkinter as ctk
import re


class TasksPage:
    def __init__(self, parent):
        """–°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        self.parent = parent
        self.tasks = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        self.task_entry_frame = None  # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
        self.task_texts = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∑–∞–¥–∞—á

    def create_tasks_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏"""
        frame = ctk.CTkFrame(self.parent)
        frame.pack(fill="both", expand=True)

        self.tasks_list_label = ctk.CTkLabel(frame, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", font=("Arial", 18))
        self.tasks_list_label.pack(pady=(10, 5))

        # –§—Ä–µ–π–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        self.tasks_frame = ctk.CTkScrollableFrame(frame)
        self.tasks_frame.pack(fill="both", expand=True, pady=5, padx=5)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.button_tasks_frame = ctk.CTkFrame(frame)
        self.button_tasks_frame.pack(fill="both", padx=5, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
        self.add_task_button = ctk.CTkButton(self.button_tasks_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
                                             command=self.show_task_entry)
        self.add_task_button.grid(row=0, column=0, pady=10, padx=30)

        self.edit_task_button = ctk.CTkButton(self.button_tasks_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
        self.edit_task_button.grid(row=0, column=1, pady=10, padx=30)

        return frame

    def show_task_entry(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if self.task_entry_frame is None:
            self.task_entry_frame = ctk.CTkFrame(self.tasks_frame)
            self.task_entry_frame.pack(fill="x", pady=5)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Å–∏–º–≤–æ–ª–æ–≤
            self.task_entry = ctk.CTkEntry(self.task_entry_frame, width=400, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É...",
                                           validate="key",
                                           validatecommand=(self.parent.register(self.validate_input), '%P'))
            self.task_entry.pack(side="left", padx=5)

            confirm_button = ctk.CTkButton(self.task_entry_frame, text="‚úî", width=30, command=self.add_task)
            confirm_button.pack(side="right", padx=5)

    def validate_input(self, value):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤)"""
        return len(value) <= 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤

    def add_task(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        task_text = self.task_entry.get().strip()

        if task_text:
            task_frame = ctk.CTkFrame(self.tasks_frame)
            task_frame.pack(fill="x", pady=5)

            # –ú–µ—Ç–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
            task_label = ctk.CTkLabel(task_frame, text=task_text, anchor="w", font=("Arial", 14, "normal"))
            task_label.pack(side="left", padx=5, fill="x", expand=True)

            # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
            self.task_texts[task_label] = task_text

            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            delete_button = ctk.CTkButton(task_frame, text="‚ùå", width=30,
                                          command=lambda: self.remove_task(task_frame, task_label))
            delete_button.pack(side="right", padx=5)

            # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_button = ctk.CTkButton(task_frame, text="‚úè", width=30,
                                        command=lambda: self.edit_task(task_label, task_frame, edit_button,
                                                                       status_dropdown))
            edit_button.pack(side="right", padx=5)

            # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            status_var = ctk.StringVar(value="–î–æ–±–∞–≤—å —Å—Ç–∞—Ç—É—Å")
            status_options = ["–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"]
            status_dropdown = ctk.CTkComboBox(task_frame, values=status_options, variable=status_var, state="readonly",
                                              command=lambda s: self.update_task_status(task_label, status_var))
            status_dropdown.pack(side="right", padx=5)

            self.tasks.append(task_frame)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        if self.task_entry_frame:
            self.task_entry_frame.destroy()
            self.task_entry_frame = None

    def edit_task(self, task_label, task_frame, edit_button, status_dropdown):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        task_text = task_label.cget("text")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏

        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        clean_text = re.sub(r" [‚úÖ‚è≥‚ùå]+$", "", task_text)

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–¥–∞—á–∏
        edit_entry = ctk.CTkEntry(task_frame, width=400)
        edit_entry.insert(0, clean_text)  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º
        edit_entry.pack(side="left", padx=5, fill="x", expand=True)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–≤–æ–¥ –≤ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
        edit_entry.configure(validate="key", validatecommand=(self.parent.register(self.validate_input), '%P'))

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.confirm_button = ctk.CTkButton(task_frame, text="‚úî", width=30,
                                            command=lambda: self.confirm_edit_task(task_label, edit_entry, edit_button,
                                                                                   status_dropdown))
        self.confirm_button.pack(side="right", padx=5)

        # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        task_label.pack_forget()
        edit_button.pack_forget()
        status_dropdown.pack_forget()

    def confirm_edit_task(self, task_label, edit_entry, edit_button, status_dropdown):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        new_text = edit_entry.get().strip()

        if new_text:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–Ω–∞—á–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            self.task_texts[task_label] = new_text

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            current_status = status_dropdown.get()

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —Å–∏–º–≤–æ–ª
            status_symbol = " ‚ùå" if current_status == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else \
                " ‚è≥" if current_status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" else \
                    " ‚úÖ" if current_status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" else ""

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
            task_label.configure(text=new_text + status_symbol, font=("Arial", 14, "normal"))

        task_label.pack(side="left", padx=5, fill="x", expand=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞
        edit_button.pack(side="right", padx=5)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        status_dropdown.pack(side="right", padx=5)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        edit_entry.destroy()  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.confirm_button.destroy()

    def update_task_status(self, task_label, status_var):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏ (–º–µ–Ω—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)"""
        status = status_var.get()

        # üîπ –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        task_text = self.task_texts.get(task_label, task_label.cget("text"))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        if status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ":
            task_label.configure(font=("Arial", 14, "normal"), text=task_text + " ‚úÖ", text_color="Green")
        elif status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ":
            task_label.configure(font=("Arial", 14, "normal"), text=task_text + " ‚è≥", text_color="Orange")
        elif status == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
            task_label.configure(font=("Arial", 14, "normal"), text=task_text + " ‚ùå", text_color="Red")

    def remove_task(self, task_frame, task_label):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.tasks.remove(task_frame)
        self.task_texts.pop(task_label, None)  # üîπ –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        task_frame.destroy()
