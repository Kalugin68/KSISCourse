import customtkinter as ctk
from tkcalendar import Calendar
from PIL import Image, ImageDraw


# ====== –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ======
class OrganizerWindow(ctk.CTkToplevel):
    def __init__(self, master, username, password):
        super().__init__(master)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = 550
        window_height = 505
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        self.geometry(f"{window_width}x{window_height}+{x}+{y}")

        self.__login_name = username
        self.__login_password = password

        self.title("–°–µ—Ç–µ–≤–æ–π –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä")
        self.geometry("800x600")
        ctk.set_appearance_mode("System")  # –¢–µ–º–∞ (Light/Dark)
        ctk.set_default_color_theme("green")  # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(fill="both", expand=True)

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å (–ª–µ–≤–∞—è —á–∞—Å—Ç—å)
        self.nav_frame = ctk.CTkFrame(self.main_frame, width=200)
        self.nav_frame.pack(side="left", fill="y")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_author = Image.open("Images/author.jpg")
        self.rounded_image_author = self.round_image(self.image_author, 1320)
        self.image_author_tk = ctk.CTkImage(size=(80, 80), light_image=self.rounded_image_author,
                                            dark_image=self.rounded_image_author)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ CTkLabel
        self.image_author_label = ctk.CTkLabel(self.nav_frame, text="", image=self.image_author_tk)
        self.image_author_label.pack(padx=10, pady=5)

        self.login_label = ctk.CTkLabel(self.nav_frame, text=self.get_login_name(), font=("Arial", 14))
        self.login_label.pack(padx=10, pady=5)

        self.nav_buttons = {
            "–ó–∞–¥–∞—á–∏": ctk.CTkButton(self.nav_frame, text="üìã –ó–∞–¥–∞—á–∏", command=lambda: self.show_frame("tasks")),
            "–ó–∞–º–µ—Ç–∫–∏": ctk.CTkButton(self.nav_frame, text="üìù –ó–∞–º–µ—Ç–∫–∏", command=lambda: self.show_frame("notes")),
            "–ö–∞–ª–µ–Ω–¥–∞—Ä—å": ctk.CTkButton(self.nav_frame, text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", command=lambda: self.show_frame("calendar")),
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": ctk.CTkButton(self.nav_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=lambda: self.show_frame("settings"))
        }

        for btn in self.nav_buttons.values():
            btn.pack(fill="x", padx=10, pady=5)

        # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (–ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å)
        self.content_frame = ctk.CTkFrame(self.main_frame)
        self.content_frame.pack(side="right", fill="both", expand=True)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.frames = {
            "author": self.create_author_page(),
            "tasks": self.create_tasks_page(),
            "notes": self.create_notes_page(),
            "calendar": self.create_calendar_page(),
            "settings": self.create_settings_page()
        }
        self.add_image_with_tooltip()
        self.show_frame("tasks")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –î–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
    def get_login_name(self):
        return self.__login_name
    def get_login_password(self):
        return self.__login_password

    def show_frame(self, name):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        for frame in self.frames.values():
            frame.pack_forget()
        self.frames[name].pack(fill="both", expand=True)

    def create_author_page(self):
        frame = ctk.CTkFrame(self.content_frame)
        ctk.CTkLabel(frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ", font=("Arial", 18)).pack(pady=10)
        return frame

    def create_tasks_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏"""
        frame = ctk.CTkFrame(self.content_frame)
        frame.pack(fill="both", expand=True)

        self.tasks_list_label = ctk.CTkLabel(frame, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", font=("Arial", 18))
        self.tasks_list_label.pack(pady=(10, 5))

        # –§—Ä–µ–π–º —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        self.tasks_frame = ctk.CTkScrollableFrame(frame)
        self.tasks_frame.pack(fill="both", expand=True, pady=5, padx=5)

        self.tasks = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.button_tasks_frame = ctk.CTkFrame(frame)
        self.button_tasks_frame.pack(fill="both", padx=5, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
        self.add_task_button = ctk.CTkButton(self.button_tasks_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", command=self.show_task_entry)
        self.add_task_button.grid(row=0, column=0, pady=10, padx=30)

        self.edit_task_button = ctk.CTkButton(self.button_tasks_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
        self.edit_task_button.grid(row=0, column=1, pady=10, padx=30)

        self.task_entry_frame = None  # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏

        return frame

    def create_notes_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        frame = ctk.CTkFrame(self.content_frame)
        ctk.CTkLabel(frame, text="–ó–∞–º–µ—Ç–∫–∏", font=("Arial", 18)).pack(pady=10)
        ctk.CTkTextbox(frame, width=400, height=300).pack(pady=5)
        return frame

    def create_calendar_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"""
        frame = ctk.CTkFrame(self.content_frame)
        ctk.CTkLabel(frame, text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å", font=("Arial", 18)).pack(pady=10)
        cal = Calendar(frame, selectmode="day")
        cal.pack(pady=5)
        return frame

    def create_settings_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        frame = ctk.CTkFrame(self.content_frame)
        ctk.CTkLabel(frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", font=("Arial", 18)).pack(pady=10)
        return frame

    def show_task_entry(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if self.task_entry_frame is None:
            self.task_entry_frame = ctk.CTkFrame(self.tasks_frame)
            self.task_entry_frame.pack(fill="x", pady=5)

            self.task_entry = ctk.CTkEntry(self.task_entry_frame, width=400, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É...")
            self.task_entry.pack(side="left", padx=5)

            confirm_button = ctk.CTkButton(self.task_entry_frame, text="‚úî", width=30, command=self.add_task)
            confirm_button.pack(side="right", padx=5)

    def add_task(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        task_text = self.task_entry.get().strip()

        if task_text:
            task_frame = ctk.CTkFrame(self.tasks_frame)
            task_frame.pack(fill="x", pady=5)

            task_label = ctk.CTkLabel(task_frame, text=task_text, anchor="w")
            task_label.pack(side="left", padx=5)

            delete_button = ctk.CTkButton(task_frame, text="‚ùå", width=30, command=lambda: self.remove_task(task_frame))
            delete_button.pack(side="right", padx=5)

            self.tasks.append(task_frame)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        if self.task_entry_frame:
            self.task_entry_frame.destroy()
            self.task_entry_frame = None

    def remove_task(self, task_frame):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        self.tasks.remove(task_frame)
        task_frame.destroy()

    def add_image_with_tooltip(self):
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        self.image_author_label.bind("<Enter>", self.on_hover)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        self.image_author_label.bind("<Leave>", self.on_leave)  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        self.image_author_label.bind("<Button-1>", self.show_tooltip)  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        self.tooltip = None

    def show_tooltip(self, event):
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ

        self.show_frame("author")

    def on_hover(self, event):
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏

        self.image_author_label.configure(cursor="hand2")  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

    def on_leave(self, event):
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

        self.image_author_label.configure(cursor="")  # –∫—É—Ä—Å–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def round_image(self, image_main, radius):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç RGBA (—Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
        image_main = image_main.convert("RGBA")
        width, height = image_main.size

        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        mask = Image.new("L", (width, height), 0)
        draw = ImageDraw.Draw(mask)
        draw.rounded_rectangle((0, 0, width, height), radius=radius, fill=255)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫—É –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_main.putalpha(mask)

        return image_main
